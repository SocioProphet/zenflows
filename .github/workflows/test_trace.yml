# SPDX-License-Identifier: AGPL-3.0-or-later
# Zenflows is software that implements the Valueflows vocabulary.
# Zenflows is designed, written, and maintained by srfsh <srfsh@dyne.org>
# Copyright (C) 2021-2023 Dyne.org foundation <foundation@dyne.org>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Test trace

on:
  push:
    branches: ['CI_notebook']
  pull_request:
    branches: [ "CI_notebook" ]

jobs:

  run_tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: check-out zenflows repository
        uses: actions/checkout@v3
        with:
          ref: 'CI_notebook'
          submodules: true
      - name: Set up zenflows container
        env:
          IF_KEY: ${{ secrets.KEY }}
        run: |
          admin_key=${IF_KEY}
          db_pass=$(openssl rand -hex 16)
          room_salt=$(openssl rand -hex 16)
          email_addr='fake@dyne.org'
          email_key='a_fake_email_key'
          /usr/bin/sed 's,@ADMIN_KEY,'"$admin_key"', ; s,@DB_PASS,'"$db_pass"', ; s,@ROOM_SALT,'"$room_salt"', ; s,@EMAIL_ADDR,'"$email_addr"', ; s,@EMAIL_KEY,'"$email_key"',' devop/.docker-compose.templ > devop/docker-compose.yml
          # /usr/bin/sed 's,image: zenflows:latest,image: zenflows-debug:latest, ; s,@ADMIN_KEY,'"$admin_key"', ; s,@DB_PASS,'"$db_pass"', ; s,@ROOM_SALT,'"$room_salt"',' devop/.docker-compose.templ > devop/docker-compose.yml
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq
          yq e '.services.srv.ports = [] | .services.notebook = {"image": "notebook:latest", "depends_on": ["srv"], "stdin_open": true, "tty": true}' -i devop/docker-compose.yml
          cat devop/docker-compose.yml

      - name: check-out jupyter notebook repo
        uses: actions/checkout@v3
        with:
          repository: interfacerproject/Interfacer-notebook
          # path: &nb_path notebook
          path: notebook
      - name: Create docker file for testing with notebook
        run: |
            cat <<- EOF > ./notebook/tmp.docker
            FROM python:3
            RUN pip install notebook zenroom requests plotly pytest papermill
            RUN useradd -ms /bin/bash app
            USER app
            WORKDIR /app
            ADD . .
            EOF
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build notebook image
        uses: docker/build-push-action@v4
        with:
          context: ./notebook
          file: "./notebook/tmp.docker"
          push: false
          load: true
          tags: notebook:latest

      - name: Build and run tests on notebook container
        env:
          IF_KEY: ${{ secrets.KEY }}
        run: |
          ./mann devop.run --rm -e IF_KEY=${IF_KEY} notebook pytest --endpoint http://srv:8000/api
          # ./mann devop.up -d
          # ./mann devop.down
          # while : ; do curl http://localhost:8000/ 2>/dev/null && echo "Server UP" && break || docker compose -p zenflows -f devop/docker-compose.yml ps; sleep 5 ; done


  # run_tester:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #   steps:
      # - name: check-out jupyter notebook repo
      #   uses: actions/checkout@v3
      #   with:
      #     repository: interfacerproject/Interfacer-notebook
      #     # path: &nb_path notebook
      #     path: notebook
      # - name: Set up Python 3.11
      #   uses: actions/setup-python@v3
      #   with:
      #     python-version: "3.11"
      # - name: Install dependencies
      #   env:
      #       # NB_PATH: *nb_path
      #       NB_PATH: notebook
      #   run: |
      #     # ls -l ${NB_PATH}
      #     python -m pip install --upgrade pip
      #     pip install pytest
      #     # pip install flake8
      #     pip install zenroom requests notebook papermill plotly
      #     if [ -f ${NB_PATH}/requirements.txt ]; then pip install -r ${NB_PATH}/requirements.txt; fi
      # - name: Test with pytest
      #   env:
      #     IF_KEY: ${{ secrets.KEY }}
      #     # NB_PATH: *nb_path
      #     NB_PATH: notebook
      #   run: |
      #     cd ${NB_PATH}
      #     pytest --endpoint http://localhost:8000/api
      #     cd ..
      #     ./mann devop.down
