#!/bin/sh

# Zenflows is designed to implement the Valueflows vocabulary,
# written and maintained by srfsh <info@dyne.org>.
# Copyright (C) 2021-2022 Dyne.org foundation <foundation@dyne.org>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -e

progname=$(basename "$0")

export MIX_ENV="${MIX_ENV:-dev}"

main() {
	while getopts xpdt opt 2>/dev/null; do
		case $opt in
		x)   set -x ;;
		p)   export MIX_ENV=prod ;;
		d)   export MIX_ENV=dev ;;
		t)   export MIX_ENV=test ;;
		\?)  usage ;;
		esac
	done
	shift "$((OPTIND-1))"

	case $1 in
	help)          shift ; help "$@" ;;
	mix)           shift ; cmd_mix "$@" ;;
	serve)         shift ; cmd_serve "$@" ;;
	clean)         shift ; cmd_clean "$@" ;;
	test)          shift ; cmd_test "$@" ;;
	cover)         shift ; cmd_cover "$@" ;;
	cover.clean)   shift ; cmd_cover_clean "$@" ;;
	env.setup)     shift ; cmd_env_setup "$@" ;;
	dep.setup)     shift ; cmd_dep_setup "$@" ;;
	dep.clean)     shift ; cmd_dep_clean "$@" ;;
	dep.copy)      shift ; cmd_dep_copy "$@" ;;
	db.setup)      shift ; cmd_db_setup "$@" ;;
	db.reset)      shift ; cmd_db_reset "$@" ;;
	db.create)     shift ; cmd_db_create "$@" ;;
	db.drop)       shift ; cmd_db_drop "$@" ;;
	db.migrate)    shift ; cmd_db_migrate "$@" ;;
	db.rollback)   shift ; cmd_db_rollback "$@" ;;
	db.remigrate)  shift ; cmd_db_remigrate "$@" ;;
	doc)           shift ; cmd_doc "$@" ;;
	doc.serve)     shift ; cmd_doc_serve "$@" ;;
	doc.clean)     shift ; cmd_doc_clean "$@" ;;
	devop.setup)   shift ; cmd_devop_setup "$@";;
	devop.serve)   shift ; cmd_devop_serve "$@";;
	devop.comp)    shift ; cmd_devop_comp "$@";;
	devop.build)   shift ; cmd_devop_build "$@";;
	devop.run)     shift ; cmd_devop_run "$@";;
	devop.exec)    shift ; cmd_devop_exec "$@";;
	devop.up)      shift ; cmd_devop_up "$@";;
	devop.down)    shift ; cmd_devop_down "$@";;
	devop.logs)    shift ; cmd_devop_logs "$@";;
	*)             usage ;;
	esac
}

die() {
	printf '%s: %s\n' "$progname" "$*" >&2
	exit 1
}

warn() {
	printf '%s: %s\n' "$progname" "$*" >&2
}

usage() {
	cat <<EOF >&2
usage: $progname [-x] [-p | -d | -t] cmd [args...]

quick overview: $progname help
EOF
	exit 1
}

help() {
	cat <<EOF
options:
    -x    Write a trace for each command.  See sh(1) for details.
    -p    Set MIX_ENV=prod.
    -d    Set MIX_ENV=dev.
    -t    Set MIX_ENV=test.

commands:
    help           Print this text.
    mix            Run 'mix'.
    serve          Run the application using 'iex'.
    clean          Clean all unnecessary files.
    test           Run the tests using 'mix test'.
    cover          Run coverage on tests.
    cover.clean    Clean generated coverage files.
    env.setup      Setup configs.
    dep.setup      Setup dependencies.
    dep.clean      Clean dependencies.
    dep.copy       Copy deps to .deps.  Should be used only by devs.
    db.setup       Create the database and run the migrations.
    db.reset       Drop the database, recrate and remigrate it.
    db.create      Create the database.
    db.drop        Drop the database.
    db.migrate     Run the migration scripts.
    db.rollback    Roll back migrations.
    db.remigrate   Unroll all the migrations and migrate them again.
    doc            Generate static docs.
    doc.serve      Serve the documantation with Erlang.
    doc.clean      Clean the generated docs.
    devop.setup    Generate the pre-filled docker-compose file.
    devop.serve    Build, setup, run everything, and attach to back-end shell.
    devop.comp     Run 'docker-compose'.
    devop.build    Run 'docker-compose build.
    devop.run      Run 'docker-compose run'.
    devop.exec     Run 'docker-compose exec.
    devop.up       Run 'docker-compose up'.
    devop.down     Run 'docker-compose down'.
    devop.logs     Run 'docker-compose logs'.
EOF
}

setup() {
	if ! test -e conf/env.sh ; then
		warn "the file 'conf/env.sh' doesn't exist; running env.setup"
		cmd_env_setup
	fi
}

readenv() {
	. conf/env.sh
}

# commands
cmd_mix() {
	setup
	readenv
	mix "$@"
}

cmd_serve() {
	setup
	readenv
	iex -S mix "$@"
}

cmd_clean() {
	cmd_cover_clean
	cmd_doc_clean
	cmd_dep_clean
	rm -rf _build
}

cmd_test() {
	export MIX_ENV=test
	cmd_mix test "$@"
}

cmd_cover() {
	export MIX_ENV=test
	cmd_mix test --cover "$@"
}

cmd_cover_clean() {
	rm -rf cover
}

cmd_env_setup() {
	if test -e conf/env.sh ; then
		warn "the file 'conf/env.sh' already exists; skipping"
	else
		key=$(openssl rand -hex 64)
		pass=$(openssl rand -hex 64)
		sed 's,$ADMIN_KEY,'"$admin_key"', ; s,$ROOM_PASS,'"$pass"',' conf/.env.templ >conf/env.sh
		warn "the 'conf/env.sh' file is generated, please edit it to suit your needs"
	fi
}

cmd_dep_setup() {
	test -d deps || cp -rf .deps deps
}

cmd_dep_clean() {
	rm -rf deps
}

cmd_dep_copy() {
	ext=$(date +%Y%m%d%H%M%S)
	mv .deps .deps."$ext"
	cp -rf deps .deps
}

cmd_db_setup() {
	cmd_db_create
	cmd_db_migrate
}

cmd_db_reset() {
	cmd_db_drop
	cmd_db_setup
}

cmd_db_create() {
	cmd_mix ecto.create "$@"
}

cmd_db_drop() {
	cmd_mix ecto.drop "$@"
}

cmd_db_migrate() {
	cmd_mix ecto.migrate "$@"
}

cmd_db_rollback() {
	cmd_mix ecto.rollback "$@"
}

cmd_db_remigrate() {
	cmd_db_rollback --all
	cmd_db_migrate
}

cmd_doc() {
	cmd_mix docs -f html
}

cmd_doc_serve() {
	if ! test -e .docs/index.html ; then
		warn "the docs hasn't been generated yet; running 'doc' to generate them"
		cmd_doc
	fi

	erl -noshell -s inets -eval '
		{ok, _Pid} = inets:start(httpd, [
			{server_name, "zenflows document server"},
			{server_root, ".docs/"},
			{document_root, ".docs/"},
			{port, 8192},
			{directory_index, ["index.html"]},
			{mime_types, [
				{"html", "text/html"},
				{"js", "text/javascript"},
				{"css", "text/css"}
			]}
		]),
		io:format("the docs are served at: http://localhost:8192/~nhit control-c twitce to exit~n").
	'
}

cmd_doc_clean() {
	rm -rf .docs
}

cmd_devop_setup() {
	if test -e devop/docker-compose.yml ; then
		warn "the file 'devop/docker-compose.yml' already exists; skipping"
	else
		admin_key=$(openssl rand -hex 64)
		db_pass=$(openssl rand -hex 16)
		room_key=$(openssl rand -hex 64)
		sed 's,$ADMIN_KEY,'"$admin_key"', ;
		     s,$DB_PASS,'"$db_pass"', ;
		     s,$ROOM_PASS,'"$room_pass"',' devop/.docker-compose.templ >devop/docker-compose.yml
		warn "the 'devop/docker-compose.yml' file is generated, please edit it to suit your needs"
	fi
}

cmd_devop_serve() {
	cmd_devop_comp run --service-ports --rm srv start_iex
}

cmd_devop_comp() {
	cmd_devop_setup
	docker-compose -p zenflows -f devop/docker-compose.yml "$@"
}

cmd_devop_build() {
	cmd_devop_comp build "$@"
}

cmd_devop_run() {
	cmd_devop_comp run "$@"
}

cmd_devop_exec() {
	cmd_devop_comp exec "$@"
}

cmd_devop_up() {
	cmd_devop_comp up "$@"
}

cmd_devop_down() {
	cmd_devop_comp down "$@"
}

cmd_devop_logs() {
	cmd_devop_comp logs "$@"
}

main "$@"
